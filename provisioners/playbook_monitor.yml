---
- name: Ansible provisioning
  hosts: all
  become: yes
  become_user: root
  vars:
    firewall_service: ufw
    create_user: hichem
    password_hash: $6$mysecretsalt$MIJffjeQyfrKKrGkprGrDL/g2mCJa53koLmYQuuLmY9y37pDvGKPXU1Ov3RbMi.tpQ9cWvxAzUVtBLe7KrZoU. # hash for word password
  tasks:
        
    - name: permit root login
      lineinfile: 
        path: /etc/ssh/sshd_config
        regexp: '^PermitRootLogin'
        line: 'PermitRootLogin yes'
        state: present
        
    - name: permit password Authentification
      lineinfile: 
        path: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication'
        line: 'PasswordAuthentication yes'
        state: present
        
    - name: restart sshd service
      service:  name=sshd  state=restarted
      
    - name: Make sure we have a 'wheel' group
      group:
         name: wheel
         state: present

    - name: Allow 'wheel' group to have passwordless sudo
      lineinfile:
          dest: /etc/sudoers
          state: present
          regexp: '^%wheel'
          line: '%wheel ALL=(ALL) NOPASSWD: ALL'
          validate: 'visudo -cf %s'
          
    - name: create ansible user with password='password'
      user: name="{{create_user}}"  shell=/bin/bash generate_ssh_key=yes  password='{{password_hash}}' groups=wheel state=present createhome=yes
      
    - name: set ansible user with passwordless sudo
      copy:
        content: '{{create_user}} ALL=(ALL) NOPASSWD: ALL' 
        dest: /etc/sudoers.d/{{create_user}}
        force: yes  
         
    - name: disable firewall service
      service: name="{{firewall_service}}"  state=stopped enabled=false
    
    - name: Add docker apt key
      apt_key:
         url: https://download.docker.com/linux/ubuntu/gpg
         state: present

    - name: get ubuntu release name
      command: lsb_release -cs
      register: release_name

    - name: add Docker repo
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{release_name.stdout}} stable"
        state: present
        filename: docker

    - name: install Docker    
      package: 
        name:
          - "docker-ce" 
          - "docker-ce-cli" 
          - "containerd.io"
          - "curl"
          - apt-transport-https
          - ca-certificates
          - software-properties-common

    - name: start Docker Service
      service:
        name: docker
        state: started 
        enabled: yes 
    
    - name: install docker compose
      shell: 
        cmd: 'curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose'
        creates: "/usr/local/bin/docker-compose"

    - name: set execute for docker compose
      file: 
        path: '/usr/local/bin/docker-compose'
        mode: '0755'  

    - name: add vagrant user to docker docker group
      user:
        name: vagrant
        groups: docker
        append: yes

    - name: verify compose directories
      file:
        path: "{{item}}"
        state: directory
      with_items:
        - /etc/docker-compose
        - /etc/docker-compose/watchtower

    - name: create systemd service
      copy:
        src: files/docker-compose.service
        dest: "/etc/systemd/system/docker-compose@.service"

    - name: configure automatic reload of systemd to Regularly pull and build new Docker images
      cron:
        name: "systemctl reload docker services"
        minute: "0"
        hour: "4"
        job: "/bin/systemctl reload docker-compose@*.service"

    - name: create watchtower compose file
      copy:
        src: files/watchtower-docker-compose.yml
        dest: /etc/docker-compose/watchtower/docker-compose.yml
    
    - name: start watchtower service
      systemd:
       name: docker-compose@watchtower
       state: started
       enabled: yes
       daemon_reload: yes

# - name: register client in freeipa 
#   become: true
#   hosts: all
#   vars_files:
#     - ipa_params.yml 
#   pre_tasks:
#    - add_host:
#       name: "{{ipaclient_servers}}"   
#       groups: "ipaserver"

#   roles:
#   - role: ipaclient
#     state: present
    
  
#   post_tasks:
#   - name: make sure line 'dns=none' is set in /etc/NetworkManager/NetworkManager.conf
#     ini_file:
#       path: /etc/NetworkManager/NetworkManager.conf
#       state: present
#       no_extra_spaces: yes
#       section: main
#       option: dns
#       value: none
#       owner: root
#       group: root
#       mode: 0644
#       backup: yes 
  
#   - name: set DNS server
#     lineinfile:
#       path: /etc/resolv.conf
#       state: present
#       regexp: '^nameserver'
#       line: nameserver {{ipaserver_ip_addresse }}

    
#   - name: reload NetworkManager
#     service:
#       name: NetworkManager
#       state: reloaded

- name: setup zoonavigator
  hosts: all
  become: yes
  vars:
    zoonav_port: 9000
    zkconn: "zookeeper1.test.local:2181,zookeeper2.test.local:2181,zookeeper3.test.local:2181"
    zkname: ZKCluster
  tasks:
    - name: create zoonavigator directory
      file:
        path: "{{item}}"
        state: directory
      with_items:
        - /etc/docker-compose/zoonavigator

    - name: create zoonavigator compose file
      template:
        src: files/zoonavigator-docker-compose.j2
        dest: /etc/docker-compose/zoonavigator/docker-compose.yml
    
    - name: start zoonavigator service
      systemd:
       name: docker-compose@zoonavigator
       state: started
       enabled: yes
       daemon_reload: yes

- name: setup kafka Manager
  hosts: all
  become: yes
  vars:
    kafka_manager_port: 9001
    zkconn: "zookeeper1.test.local:2181,zookeeper2.test.local:2181,zookeeper3.test.local:2181"
    application_secret: "random-secret"
    kafka_manager_auth_enabled: "true"
    kafka_manager_username: "admin"
    kafka_manager_password: "password"
  tasks:
    - name: create kafkamanager directory
      file:
        path: "{{item}}"
        state: directory
      with_items:
        - /etc/docker-compose/kafkamanager

    - name: create kafkamanager compose file
      template:
        src: files/kafkamanager-docker-compose.j2
        dest: /etc/docker-compose/kafkamanager/docker-compose.yml
    
    - name: start kafkamanager service
      systemd:
       name: docker-compose@kafkamanager
       state: started
       enabled: yes
       daemon_reload: yes


...
